import 'package:flutter/material.dart';
import 'package:introduction_screen/introduction_screen.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  
  NotificationService notificationService = NotificationService();
  await notificationService.init();
  await notificationService.subscribeToTemperatureNotifications();
  await notificationService.subscribeToHumidityNotifications();
  
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Onboarding Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: OnboardingScreen(),
    );
  }
}

class OnboardingScreen extends StatelessWidget {
  final introKey = GlobalKey<IntroductionScreenState>();

  void _onIntroEnd(context) {
    Navigator.of(context).push(
      MaterialPageRoute(builder: (_) => RealTimeDataPage()),
    );
  }

  @override
  Widget build(BuildContext context) {
    return IntroductionScreen(
      key: introKey,
      pages: [
        PageViewModel(
          title: "Welcome",
          body: "This is an onboarding screen to showcase the app features.",
          image: Image.asset('assets/images/onboarding1.png'),
          decoration: pageDecoration(),
        ),
        PageViewModel(
          title: "Real-time Data",
          body: "Monitor temperature and humidity in real-time.",
          image: Image.asset('assets/images/onboarding2.png'),
          decoration: pageDecoration(),
        ),
        PageViewModel(
          title: "Data Visualization",
          body: "Visualize temperature and humidity data in charts.",
          image: Image.asset('assets/images/onboarding3.png'),
          decoration: pageDecoration(),
        ),
      ],
      onDone: () => _onIntroEnd(context),
      done: Text("Get Started"),
      showSkipButton: true,
      skip: Text("Skip"),
      next: Icon(Icons.arrow_forward),
      dotsDecorator: dotsDecorator(),
    );
  }

  DotsDecorator dotsDecorator() {
    return DotsDecorator(
      activeColor: Colors.blue,
      size: Size(10.0, 10.0),
      activeSize: Size(22.0, 10.0),
      activeShape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(24.0),
      ),
    );
  }

  PageDecoration pageDecoration() {
    return PageDecoration(
      titleTextStyle: TextStyle(fontSize: 24.0, fontWeight: FontWeight.bold),
      bodyTextStyle: TextStyle(fontSize: 16.0),
      descriptionPadding: EdgeInsets.fromLTRB(16.0, 0.0, 16.0, 16.0),
      imagePadding: EdgeInsets.all(24.0),
    );
  }
}

class RealTimeDataPage extends StatefulWidget {
  @override
  _RealTimeDataPageState createState() => _RealTimeDataPageState();
}

class _RealTimeDataPageState extends State<RealTimeDataPage> {
  FirebaseService _firebaseService = FirebaseService();
  String temperature = '';
  String humidity = '';
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  @override
  void initState() {
    super.initState();
    _initializeLocalNotifications();
    _subscribeToTemperatureStream();
    _subscribeToHumidityStream();
  }

  void _initializeLocalNotifications() {
    var initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    var initializationSettingsIOS = IOSInitializationSettings();
    var initializationSettings = InitializationSettings(
        android: initializationSettingsAndroid, iOS: initializationSettingsIOS);

    flutterLocalNotificationsPlugin.initialize(initializationSettings);
  }

  void _subscribeToTemperatureStream() {
    _firebaseService.getTemperatureStream().listen((event) {
      double temperature = event.snapshot.value.toDouble();
      setState(() {
        temperatureDataList.add(
          TemperatureData(
            DateTime.now(),
            temperature,
          ),
        );
      });

      if (temperature > 30) {
        _showTemperatureNotification(temperature);
      }
    });
  }

  void _subscribeToHumidityStream() {
    _firebaseService.getHumidityStream().listen((event) {
      double humidity = event.snapshot.value.toDouble();
      setState(() {
        humidityDataList.add(
          HumidityData(
            DateTime.now(),
            humidity,
          ),
        );
      });

      if (humidity > 55) {
        _showHumidityNotification(humidity);
      }
    });
  }

  Future<void> _showTemperatureNotification(double temperature) async {
    var androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'channel_id',
      'channel_name',
      'channel_description',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
      icon: '@mipmap/ic_launcher',
    );

    var iOSPlatformChannelSpecifics = IOSNotificationDetails();

    var platformChannelSpecifics = NotificationDetails(
        android: androidPlatformChannelSpecifics,
        iOS: iOSPlatformChannelSpecifics);

    await flutterLocalNotificationsPlugin.show(
      0,
      'High Temperature Alert',
      'The temperature is ${temperature.toStringAsFixed(1)}Â°C. Take necessary measures.',
      platformChannelSpecifics,
    );
  }

  Future<void> _showHumidityNotification(double humidity) async {
    var androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'channel_id',
      'channel_name',
      'channel_description',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
      icon: '@mipmap/ic_launcher',
    );

    var iOSPlatformChannelSpecifics = IOSNotificationDetails();

    var platformChannelSpecifics = NotificationDetails(
        android: androidPlatformChannelSpecifics,
        iOS: iOSPlatformChannelSpecifics);

    await flutterLocalNotificationsPlugin.show(
      0,
      'High Humidity Alert',
      'The humidity is ${humidity.toStringAsFixed(1)}%. Take necessary measures.',
      platformChannelSpecifics,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Temperature & Humidity Tracking'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Temperature: $temperature',
              style: TextStyle(
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(
              'Humidity: $humidity',
              style: TextStyle(
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class FirebaseService {
  final DatabaseReference _databaseReference =
      FirebaseDatabase.instance.ref();

  Stream<Event> getTemperatureStream() {
    return _databaseReference.child('test/temperature').onChildAdded;
  }

  Stream<Event> getHumidityStream() {
    return _databaseReference.child('test/humidity').onChildAdded;
  }
}

class NotificationService {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;

  Future<void> init() async {
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      announcement: true,
      carPlay: true,
      criticalAlert: true,
      provisional: false,
      sound: true,
    );

    print('User granted permission: ${settings.authorizationStatus}');
  }

  Future<void> subscribeToTemperatureNotifications() async {
    await _firebaseMessaging.subscribeToTopic('temperature');
    print('Subscribed to temperature notifications');
  }

  Future<void> subscribeToHumidityNotifications() async {
    await _firebaseMessaging.subscribeToTopic('humidity');
    print('Subscribed to humidity notifications');
  }
}

class TemperatureData {
  final DateTime time;
  final double temperature;

  TemperatureData(this.time, this.temperature);
}

List<TemperatureData> temperatureDataList = [];

class HumidityData {
  final DateTime time;
  final double humidity;

  HumidityData(this.time, this.humidity);
}

List<HumidityData> humidityDataList = [];
